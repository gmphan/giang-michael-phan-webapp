@model PostMetaView
@{
    ViewData["Title"] = "Posts";
    var count = 100;
    var index = 0;
    var postMetaData = @Model.PostMetaDTOs;
}
<div class="row justify-content-center">
    <div class="col-lg-10 col-md-12">
        <div class="card mb-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h1>Posts </h1>
                <small>
                    <a asp-area="Visitor" asp-controller="Post"  asp-action="Create" class="btn btn-primary mx-2"> 
                        <i class="bi bi-plus-square"> New Post</i>
                    </a>
                </small>
            </div>
            <div class="card-body">
                <div class="accordion" id="accordionExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            About The Posts
                        </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                            <div class="accordion-body">
                                <ul>
                                    <li>Posting provides a structured way to document code insights and project milestones for future reference.</li>
                                    <li>It serves as a repository for valuable information gathered from diverse sources.</li>
                                    <li>Writing on various topics reinforces my understanding and strengthens my expertise.</li>
                                    <li>These posts streamline workflows by offering quick access to essential resources across projects.</li>
                                    <li>Some entries offer insights into the unique features of this web application.</li>
                                </ul>
                            </div>  
                        </div>
                    </div>
                    @foreach (var item in postMetaData)
                    {
                        var headingId = $"heading{item.Id}";
                        var collapseId = $"collapse{item.Id}";
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@headingId">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="true" aria-controls="@collapseId" onclick="LoadPostDetail(@item.Id)">
                                    @item.Title;
                                </button>
                            </h2>
                            <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                                <div class="accordion-body" id="accordingBody-@item.Id">
                                    
                                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        function LoadPostDetail(postId) {
            fetch(`/Visitor/Post/GetPostDetail/${postId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok " + response.statusText);
                    }
                    return response.text();
                })
                .then(data => {
                    // Update the accordion body content with the fetched data/ _Detail partial view
                    document.getElementById(`accordingBody-${postId}`).innerHTML = data;
                })
                .catch(error => {
                    console.error('Error fetching post detail: ', error)
                });
        }
    </script>
    
}